pipeline {
    agent any
    
    environment {
        // Define GitHub repository and branch
        REPO_URL = 'https://github.com/ardhikaxx/website-glucowise.git'
        BRANCH = 'main' // Use the branch that you want to deploy from
        IMAGE_NAME = 'glucowise_app'
        CONTAINER_NAME = 'laravel_app1'
        NGINX_CONTAINER = 'laravel_webserver'
    }
    
    stages {
        stage('Pull Latest Code') {
            steps {
                // Clone the latest changes from GitHub repository
                git branch: BRANCH, url: REPO_URL
            }
        }
        
        stage('Build Docker Images') {
            steps {
                script {
                    // Change to the 'glucowise' directory where docker-compose.yml is located
                    dir('glucowise') {
                        // Check if the docker-compose.yml file exists in the 'glucowise' directory
                        if (!fileExists('docker-compose.yml')) {
                            error "docker-compose.yml not found in the 'glucowise' directory."
                        }
                        // Build the Docker images using docker-compose
                        sh 'docker-compose build --no-cache'
                    }
                }
            }
        }

        stage('Restart Containers') {
            steps {
                script {
                    // Change to the 'glucowise' directory and restart the containers
                    dir('glucowise') {
                        // Stop and remove the existing containers
                        sh 'docker-compose down'
                        
                        // Recreate and restart the containers with the latest code
                        sh 'docker-compose up -d'
                    }
                }
            }
        }

        stage('Run Composer and Migrations') {
            steps {
                script {
                    // Running necessary commands inside the app container
                    sh 'docker exec -it laravel_app1 bash -c "composer install --optimize-autoloader --no-dev"'
                    sh 'docker exec -it laravel_app1 bash -c "php artisan key:generate"'
                    sh 'docker exec -it laravel_app1 bash -c "php artisan config:clear"'
                    sh 'docker exec -it laravel_app1 bash -c "php artisan config:cache"'
                    sh 'docker exec -it laravel_app1 bash -c "php artisan optimize:clear"'
                    sh 'docker exec -it laravel_app1 bash -c "php artisan migrate --force"'
                }
            }
        }

        stage('Clean Up') {
            steps {
                // Clean up unused Docker images if necessary
                sh 'docker system prune -f'
            }
        }
    }

    post {
        success {
            echo 'CI/CD pipeline executed successfully!'
        }
        failure {
            echo 'Something went wrong. Check the pipeline logs for details.'
        }
    }
}
