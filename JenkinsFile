pipeline {
    agent any
    environment {
        // Variabel untuk Docker Hub
        DOCKER_HUB_USER = 'mookyarz'
        DOCKER_HUB_PASS = 'mookyariz123'
        IMAGE_NAME = 'glucowise_app'
        IMAGE_TAG = 'latest'
        REPO_URL = 'https://github.com/ardhikaxx/website-glucowise.git'
    }

    stages {
        stage('Checkout') {
            steps {
                // Checkout dari repository GitHub
                git branch: 'main', url: "${REPO_URL}"
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Login ke Docker Hub
                    withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh "echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin"
                    }

                    // Build Docker Image
                    sh 'docker-compose build --no-cache'
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    // Push image ke Docker Hub
                    withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh "docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${DOCKER_HUB_USER}/${IMAGE_NAME}:${IMAGE_TAG}"
                        sh "docker push ${DOCKER_HUB_USER}/${IMAGE_NAME}:${IMAGE_TAG}"
                    }
                }
            }
        }

        stage('Deploy to Server') {
            steps {
                script {
                    // SSH ke server dan lakukan deploy
                    sshagent(['your-ssh-credentials-id']) {
                        sh '''
                            ssh -o StrictHostKeyChecking=no user@your-server-ip "cd /path/to/your/project && docker-compose down && docker-compose up -d"
                        '''
                    }
                }
            }
        }

        stage('Post Deployment Cleanup') {
            steps {
                // Menjalankan pembersihan setelah deployment
                echo "Clean up and check deployment"
            }
        }
    }

    post {
        always {
            // Logout dari Docker Hub setelah proses selesai
            sh "docker logout"
        }
        success {
            echo "Deployment success!"
        }
        failure {
            echo "Deployment failed!"
        }
    }
}
